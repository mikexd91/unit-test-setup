def junitPath = '';
def coveragePath = '';
def eslintPath = '';
def rocketchatChannel = '';

def datas = [];

def getProjectTitle () { return datas[0]; }
def getJUnitPath () { return datas[1]; }
def getCoveragePath () { return datas[2]; }
def getESLintPath () { return datas[3]; }
def getRocketchatChannel () { return datas[4]; }

def recordJUnit () {
	junit getJUnitPath()
}

def recordCoverage () {
	step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: getCoveragePath(), failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false]);
}

def recordCheckstyle () {
	checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: getESLintPath(), unHealthy: '';
}

pipeline {
	agent any

	stages {
		
		stage ("install") {
			// execute npm install
			steps {
				echo "SKIP INSTALL";
				//sh 'npm install';
			}
		}

		stage ("read variables") {
			steps {
				script {

					def variables = sh (
	        			script: "npm run jenkins", //process json into readable format
	        			returnStdout: true //save console output to variable
	        		).trim().split("\n");

	        		datas = variables[3..7]
	        	}
			}
		}

		stage ("Tests") {
			// perform all the test in parallel
			steps {
				parallel (

					// execute Karma
					karma: {
						script {
							try {
								sh 'npm run test --silent'; 
							} catch (err) {

								echo "Karma Test Failed";

								// If there are failed test case
								// set currentBuild.result to "FAILURE" 
								// to prevent other build steps

								currentBuild.result = 'FAILURE';

							} finally {

								// Jenkins plugin to record test reports
								recordJUnit();

								// Jenkins plugin to record code coverage reports
								recordCoverage();

							}
						}
					},

					//execute eslint
					eslint: {
						script {
							try {
								sh 'npm run eslint';
							} catch (err) {

								// TODO: Figure out what errors there might be
								echo err;

							} finally {

								// Jenkins plugin to record checkstyle reports
								recordCheckstyle();

							}
						}
						
					}

				)
			}
		}

		stage ("report") {
			steps {

				script {

					// execute js file to generate Rocketchat friendly text 
					// stores result in TEST_RESULT
					def TEST_RESULT = sh (
	        			script: "npm run rocketchat", //process json into readable format
	        			returnStdout: true //save console output to variable
	        		); 

	        		def ROCKETCHAT_CHANNEL = "jenkins-tests";
	        		// Jenkins plugin to send message to Rocketchat
	        		// TODO: make channel a variable
	        		// rocketSend channel: ROCKETCHAT_CHANNEL, message: TEST_RESULT, rawMessage: true;
				}
			}
		}
	}

	// post stage
	post {
		always {
			echo "POST ACTION";
		}
		failure {

			echo "FAIL!";
		}
	}
}