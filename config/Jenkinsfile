def projectTitle;
def junitPath;
def coveragePath;
def eslintPath;
def rocketchatChannel;

pipeline {
	agent any

	stages {
		
		stage ("install") {
			// execute npm install
			steps {
				echo "SKIP INSTALL";
				//sh 'npm install';
			}
		}

		stage ("NPM Calls") {
			steps {
				parallel (
					populateData: {
						script {
							def data = sh (
								script: 'npm run jenkins',
								returnStdout: true
							).trim().split('\n');

							projectTitle = data[3];
							junitPath = data[4];
							coveragePath = data[5];
							eslintPath = data[6];
							rocketchatChannel = data[7];

							
							try {
								sh 'npm run eslint';
							} catch (e) {
								console.log ("Eslint ran into errors");
							} finally {
								checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: eslintPath, unHealthy: '';
							}
						}
					},

					unitTest: {
						script {
							try {
								sh 'npm run test';
							} catch (e) {
								console.log ("Test complete with failures");
							}
						}
					}
				) 
			}
		}

		stage ("Record Results") {
			steps {
				parallel (
					junit: {
						junit junitPath;
					},

					coverage: {
						step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: coveragePath, failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false]);
					},

					rocketchat: {
						def testResult = sh (
		        			script: "npm run rocketchat", //process json into readable format
		        			returnStdout: true //save console output to variable
		        		); 

		        		rocketSend channel: rocketchatChannel, message: testResult, rawMessage: true;
					}
				)
			}
		}

	}

	// post stage
	post {
		always {
			echo "POST ACTION";
		}
		failure {

			echo "FAIL!";
		}
	}
}